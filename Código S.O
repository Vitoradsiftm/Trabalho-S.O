#include <stdio.h> //#include <stdio.h>: Inclui a biblioteca padrão de entrada e saída, necessária para usar funções como `printf` e `scanf`.
#include <stdlib.h>//#include <stdlib.h>: Inclui a biblioteca padrão que fornece funções como `qsort` e `malloc`.
#include <string.h>//#include <string.h>: Inclui a biblioteca padrão de manipulação de strings, necessária para usar funções como `memmove` e `strcmp`.

#define MAX_PROCESSOS 15 //#define MAX_PROCESSOS 15`: Define uma constante que representa o número máximo de processos que podem ser cadastrados.
#define MAX_NOME 20 //#define MAX_NOME 20`: Define uma constante que representa o tamanho máximo do nome de um processo.

  //- Define uma estrutura chamada `Processo` que contém: - id[MAX_NOME]: Uma string que representa o nome do processo. - 
  //tempo_execucao: Um inteiro que representa o tempo de execução do processo. 
  //- tempo_chegada: Um inteiro que representa o tempo de chegada do processo.
typedef struct {
    char id[MAX_NOME];  
    int tempo_execucao;
    int tempo_chegada;
} Processo;
//- tempo_chegada: Um inteiro que representa o tempo de chegada do processo.
int compararProcessos(const void *a, const void *b) {
    Processo *p1 = (Processo *)a;
    Processo *p2 = (Processo *)b;
    return p1->tempo_chegada - p2->tempo_chegada;
}
//imprimirResultados: Função que imprime os resultados dos tempos de execução dos processos.
//int resultado[][2]: Matriz que armazena os tempos e processos.
//int resultado_indice: Índice que indica quantos resultados foram armazenados na matriz.
//for (int i = 0; i < resultado_indice; i++): Loop sobre os resultados.
//printf("%5d |    %c\n", resultado[i][0], resultado[i][1]);`: Imprime o tempo e o processo.
void imprimirResultados(int resultado[][2], int resultado_indice) {
    printf("\nResultados dos tempos:\n\n");
    printf("Tempo | Processo\n");
    printf("------+---------\n");
    for (int i = 0; i < resultado_indice; i++) {
        printf("%5d |    %c\n", resultado[i][0], resultado[i][1]);
    }
    printf("\n");
}

void executarSRT() {
    printf("SRT\n\n");

    Processo processos[MAX_PROCESSOS];
    int num_processos; //verificar quantidade de processos 
    int i;// i para o loop

    do {
        printf("Quantos processos deseja cadastrar?\n");
        scanf("%d", &num_processos);
        if (num_processos > MAX_PROCESSOS) {
            printf("O limite máximo é de %d processos.\n\n", MAX_PROCESSOS);
        }
  // Loop para garantir que o número de processos está dentro dos limites permitidos.
    } while (num_processos > MAX_PROCESSOS || num_processos <= 0);

    for (i = 0; i < num_processos; i++) { //Loop para entrada dos dados dos processos.
        printf("Digite o nome do processo, o tempo de execução e o tempo de chegada:\n");
        scanf("%s %d %d", processos[i].id, &processos[i].tempo_execucao, &processos[i].tempo_chegada);
    }

    qsort(processos, num_processos, sizeof(Processo), compararProcessos); //Ordena os processos pelo tempo de chegada.

    Processo fila_prioridade[MAX_PROCESSOS]; //Prioridade dos processos na fila 
    int resultado[100][2]; //Matriz para armazenar os resultados.
    int tempo_atual = 0; //Variável para controlar o tempo atual.
    int fila_tamanho = 0; //Tamanho da fila de prioridade.
    int resultado_indice = 0; //ndice para armazenar os resultados.
    int continuar = 1; //Variável de controle para o loop principal.

    while (continuar) {
 //Adiciona processos à fila de prioridade quando o tempo de chegada é menor ou igual ao tempo atual.       
        for (i = 0; i < num_processos;) {
////Esta linha verifica se o tempo de chegada do processo atual (processos[i]) é menor ou igual ao tempo atual (tempo_atual).
//Se essa condição for verdadeira, significa que o processo chegou e está pronto para ser adicionado à fila de prioridade.                
         if (processos[i].tempo_chegada <= tempo_atual) { 
//Se o processo estiver pronto para ser executado, ele é adicionado à fila de prioridade (fila_prioridade).
//O índice fila_tamanho++ é usado para adicionar o processo na próxima posição livre na fila e, em seguida, incrementar o tamanho da fila.             
       fila_prioridade[fila_tamanho++] = processos[i];
//Essa linha remove o processo processos[i] da lista após movê-lo para a fila de prioridade. 
//A função memmove desloca os processos restantes para a esquerda, sobrescrevendo o processo removido       
                memmove(&processos[i], &processos[i + 1], (num_processos - i - 1) * sizeof(Processo));
//Como um processo foi removido da lista processos, o número total de processos (num_processos) é decrementado.                
                num_processos--;
            } else {
                i++;
            }
        }
//Verifica se há processos na fila de prioridade. Se fila_tamanho for maior que 0, significa que existem processos para serem executados.
        if (fila_tamanho > 0) {
//A função qsort ordena a fila_prioridade usando a função de comparação compararProcessos           
            qsort(fila_prioridade, fila_tamanho, sizeof(Processo), compararProcessos);
//O código atualiza o resultado com o tempo_atual e o identificador (id) do processo na frente da fila (fila_prioridade[0]), especificamente a primeira letra do nome (id[0]).
//Em seguida, o índice do resultado (resultado_indice) e o tempo_atual são incrementados.
            resultado[resultado_indice][0] = tempo_atual;
            resultado[resultado_indice][1] = fila_prioridade[0].id[0]; // Ajuste para exibir a primeira letra do nome
            resultado_indice++;
            tempo_atual++;

            fila_prioridade[0].tempo_execucao--;
//Se o processo ainda não terminou (tempo_execucao > 0), ele é movido para o final da fila, e os outros processos são deslocados para a frente. 
            if (fila_prioridade[0].tempo_execucao > 0) {
                Processo temp = fila_prioridade[0];
                for (i = 1; i < fila_tamanho; i++) {
                    fila_prioridade[i - 1] = fila_prioridade[i];
                }
                fila_prioridade[fila_tamanho - 1] = temp;
            } else {
                for (i = 1; i < fila_tamanho; i++) {
                    fila_prioridade[i - 1] = fila_prioridade[i];
                }
                fila_tamanho--;
            }
        } else {
            resultado[resultado_indice][0] = tempo_atual;
            resultado[resultado_indice][1] = '*';
            resultado_indice++;
            tempo_atual++;
        }
//Finaliza o loop quando não há mais processos na fila e nenhum novo processo para chegar.
        if (fila_tamanho == 0 && num_processos == 0) { 
            continuar = 0;
        }
    }

    imprimirResultados(resultado, resultado_indice); // exibir resultados
}

void executarRoundRobin() {
    printf("Round Robin:\n");

    Processo processos[MAX_PROCESSOS]; //Declara um vetor para armazenar os processos.
    int num_processos; //Variável para armazenar o número de processos.
    int i; //Índice para loops.

    do {
        printf("Quantos processos deseja cadastrar?\n");
        scanf("%d", &num_processos);
        if (num_processos > MAX_PROCESSOS) {
            printf("O limite é de %d processos.\n\n", MAX_PROCESSOS);
        }
 //Loop para garantir que o número de processos está dentro dos limites permitidos.
    } while (num_processos > MAX_PROCESSOS || num_processos <= 0);
//Loop para entrada dos dados dos processos.
    for (i = 0; i < num_processos; i++) {
        printf("Digite o nome do processo, o tempo de execução e o tempo de chegada:\n");
        scanf("%s %d %d", processos[i].id, &processos[i].tempo_execucao, &processos[i].tempo_chegada);
    }
//Ordena os processos pelo tempo de chegada.
    qsort(processos, num_processos, sizeof(Processo), compararProcessos);

    int quantum; //variavel para inserir o quantum 
    printf("Qual o valor do quantum?\n");
    scanf("%d", &quantum);

    Processo fila[MAX_PROCESSOS]; //Fila para armazenar os processos prontos para execução.
    int resultado[100][2]; //Matriz para armazenar os resultados.
    int tempo_atual = 0; //Variável para controlar o tempo atual.
    int fila_tamanho = 0; //Tamanho da fila.
    int resultado_indice = 0;//Índice para armazenar os resultados.
    int continuar = 1; //Variável de controle para o loop principal.
// Loop principal do algoritmo.
    while (continuar) {
//Adiciona processos à fila quando o tempo de chegada é menor ou igual ao tempo atual.       
        for (i = 0; i < num_processos;) {
            if (processos[i].tempo_chegada <= tempo_atual) {
                fila[fila_tamanho++] = processos[i];
                memmove(&processos[i], &processos[i + 1], (num_processos - i - 1) * sizeof(Processo));
                num_processos--;
            } else {
                i++;
            }
        }
// Verifica se a fila de processos não está vazia. Se fila_tamanho > 0, há processos para serem executados.
        if (fila_tamanho > 0) {
            int tempo_quantum = quantum;
//O loop while executa enquanto houver tempo disponível no quantum (tempo_quantum--) 
//e o processo na frente da fila (fila[0]) ainda tiver tempo de execução restante 
            while (tempo_quantum-- && fila[0].tempo_execucao > 0) {
//O tempo de execução do processo na frente da fila é decrementado.
//Atualiza o resultado com o tempo_atual e a primeira letra do id do processo.
//Incrementa o resultado_indice e o tempo_atual para a próxima unidade de tempo.                
                fila[0].tempo_execucao--;
                resultado[resultado_indice][0] = tempo_atual;
                resultado[resultado_indice][1] = fila[0].id[0]; // Ajuste para exibir a primeira letra do nome
                resultado_indice++;
                tempo_atual++;
//Esse loop verifica se há novos processos que chegaram (com tempo_chegada <= tempo_atual) e, se sim, os adiciona à fila de execução.
                for (i = 0; i < num_processos;) {
                    if (processos[i].tempo_chegada <= tempo_atual) {
                        fila[fila_tamanho++] = processos[i];
                        memmove(&processos[i], &processos[i + 1], (num_processos - i - 1) * sizeof(Processo));
                        num_processos--;
                    } else {
                        i++;
                    }
                }
            }
//Se o processo na frente da fila ainda precisa de mais tempo de execução (fila[0].tempo_execucao > 0),
//ele é movido para o final da fila.
            if (fila[0].tempo_execucao > 0) {
                Processo temp = fila[0];
                for (i = 1; i < fila_tamanho; i++) {
                    fila[i - 1] = fila[i];
                }
//Se o processo terminou (tempo_execucao == 0), ele é removido da fila, e os processos restantes são deslocados para a frente.                
                fila[fila_tamanho - 1] = temp;
            } else {
                for (i = 1; i < fila_tamanho; i++) {
                    fila[i - 1] = fila[i];
                }
                fila_tamanho--;
            }
//Se a fila de processos estiver vazia (fila_tamanho == 0), 
//o código registra no resultado que não houve execução naquele momento, usando o caractere *       
        } else {
            resultado[resultado_indice][0] = tempo_atual;
            resultado[resultado_indice][1] = '*';
            resultado_indice++;
            tempo_atual++;
        }
//Finaliza o loop quando não há mais processos na fila e nenhum novo processo para chegar.
        if (fila_tamanho == 0 && num_processos == 0) {
            continuar = 0;
        }
    }
//imprime os resultados
    imprimirResultados(resultado, resultado_indice);
}

int main() {
    int opcao;

    do {
        printf("Menu Principal\n");
        printf("Escolha um número:\n");
        printf("1. Algoritmo SRT\n");
        printf("2. Algoritmo Round Robin\n");
        printf("3. Finalizar\n");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                executarSRT();
                break;
            case 2:
                executarRoundRobin();
                break;
            case 3:
                printf("Finalizado.\n");
                break;
            default:
                printf("Escolha inválida. Tente novamente.\n");
                break;
        }
    } while (opcao != 3);

    return 0;
}
